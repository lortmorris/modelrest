#!/usr/bin/env node

const config = require('config');
const debug = require('debug')('movies:server');
const App = require('../app');

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on: ${bind}`);
}

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof addr === 'string' ? `pipe ${port}` : `port ${port}`;
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

function gracefulExit() {
  console.log('exiting');
  process.exit(0);
}

async function initApp() {
  const main = await new App(config);
  const {
    server,
  } = main;
  const port = normalizePort(process.env.PORT || config.get('server.port'));

  server.on('error', () => onError(port));
  server.on('listening', () => onListening(server));

  process.on('SIGINT', gracefulExit).on('SIGTERM', gracefulExit);
  process.on('uncaughtException', (err) => console.error(`Caught exception: ${err}`));

  // Listen on provided port, on all network interfaces.
  console.log(`listen on ${port}`);
  server.listen(port);
}

initApp();
